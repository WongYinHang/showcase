{"version":3,"sources":["firebase.js","SidebarChat.js","StateProvider.js","Sidebar.js","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","seed","setSeed","useEffect","Math","floor","random","onClick","roomName","prompt","collection","add","className","to","Avatar","src","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","onSnapshot","snapshot","docs","map","doc","data","photoURL","IconButton","SearchOutlined","placeholder","type","room","key","Chat","input","setInput","roomId","useParams","setRoomName","messages","setMessages","orderBy","Date","length","timestamp","toDate","toUTCString","AttachFile","message","displayName","onChange","e","target","preventDefault","console","log","FieldValue","serverTimestamp","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21770621.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyACp1LrQXcsC0cpT7KO3CGY-o3MiFHv3dE\",\r\n  authDomain: \"whatsapp-clone-4298a.firebaseapp.com\",\r\n  databaseURL: \"https://whatsapp-clone-4298a.firebaseio.com\",\r\n  projectId: \"whatsapp-clone-4298a\",\r\n  storageBucket: \"whatsapp-clone-4298a.appspot.com\",\r\n  messagingSenderId: \"955924318308\",\r\n  appId: \"1:955924318308:web:f34889b7b742edc357f771\",\r\n  measurementId: \"G-9BC7LTY30Y\"\r\n};\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;","import React, { useEffect, useState } from 'react'\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport './SidebarChat.css';\r\nimport db from \"./firebase\";\r\nimport {Link} from \"react-router-dom\";\r\nfunction SidebarChat( {id, name, addNewChat} ) {\r\n    const [seed, setSeed] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        setSeed(Math.floor(Math.random()*5000));\r\n    },[]);\r\n    \r\nconst createChat = () => {\r\n    const roomName = prompt(\"Please neter name for chat\");\r\n\r\n    if(roomName){\r\n        db.collection('rooms').add({\r\n            name: roomName,\r\n        })\r\n    }\r\n};\r\n \r\n    return !addNewChat ? (\r\n        <Link to={`/rooms/${id}`}>\r\n            <div className=\"sidebarchat\">\r\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`}/>\r\n                <div className=\"sidebarchat__info\">\r\n                    <h2>{name}</h2>\r\n                    <p>lastmessage</p>   \r\n                </div>\r\n            </div>\r\n        </Link>\r\n        \r\n    ) : (\r\n        <div onClick={createChat} className=\"sidebarchat\">\r\n            <h2>Add new Chat</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SidebarChat\r\n","import React ,{ createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({reducer, initialState, children}) => (\r\n    <StateContext.Provider \r\n        value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);","import React, {useState, useEffect} from 'react';\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport  DountLargeIcon  from \"@material-ui/icons/DonutLarge\";\r\nimport  ChatIcon  from \"@material-ui/icons/Chat\";\r\nimport  MoreVertIcon  from \"@material-ui/icons/MoreVert\";\r\nimport { SearchOutlined } from \"@material-ui/icons\";\r\nimport './Sidebar.css';\r\nimport SidebarChat from './SidebarChat';\r\nimport db from \"./firebase\";\r\nimport { useStateValue } from './StateProvider';\r\nfunction Sidebar() {\r\n    const [rooms, setRooms] = useState([]);\r\n    const [{user}, dispatch] = useStateValue();\r\n    useEffect(() => {\r\n        const unsubscribe = db.collection('rooms').onSnapshot((snapshot)=>\r\n            setRooms(\r\n                snapshot.docs.map(doc=>({\r\n                    id: doc.id,\r\n                    data: doc.data(),\r\n                }))\r\n            )\r\n        );\r\n        \r\n        return () => {\r\n            unsubscribe();\r\n        }\r\n    }, [])\r\n    return (\r\n        <div className=\"sidebar\">\r\n\r\n            <div className=\"sidebar__header\">\r\n            <Avatar src={user?.photoURL}/>\r\n                <div className=\"sidebar__headerRight\">\r\n                <IconButton><DountLargeIcon/></IconButton>\r\n                <IconButton><ChatIcon/></IconButton>\r\n                <IconButton><MoreVertIcon/></IconButton>\r\n                \r\n                \r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__search\">\r\n                <div className=\"sidebar__searchContainer\">\r\n                    <SearchOutlined/>\r\n                    <input placeholder=\"Search or start new chat\"  type=\"text\"/>\r\n                </div>\r\n                \r\n            </div>\r\n\r\n            <div className=\"sidebar__chats\">\r\n            <SidebarChat addNewChat/>\r\n            {rooms.map(room =>(\r\n                <SidebarChat key={room.id} id ={room.id} name={room.data.name}/>\r\n            ))}\r\n            \r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;\r\n","import React ,{ useEffect, useState } from 'react';\r\nimport \"./Chat.css\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport { SearchOutlined, AttachFile, MoreVert } from '@material-ui/icons';\r\nimport  MicIcon  from \"@material-ui/icons/Mic\";\r\nimport  InsertEmoticonIcon  from \"@material-ui/icons/InsertEmoticon\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport db from \"./firebase\"\r\nimport { useStateValue } from './StateProvider';\r\nimport firebase from \"firebase\";\r\nfunction Chat() {\r\n    //const [seed, setSeed] = useState(\"\");\r\n    const [input, setInput] = useState(\"\");\r\n    const {roomId} = useParams();\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n    const [{user},dispatch] = useStateValue();\r\n    useEffect(() => {\r\n        if (roomId) {\r\n            db.collection(\"rooms\")\r\n                .doc(roomId)\r\n                .onSnapshot((snapshot) => setRoomName\r\n                (snapshot.data().name));\r\n\r\n            db.collection(\"rooms\")\r\n                .doc(roomId)\r\n                .collection(\"messages\")\r\n                .orderBy(\"timestamp\",\"asc\")\r\n                .onSnapshot((snapshot) =>\r\n                    setMessages(snapshot.docs.map(doc => \r\n                    doc.data()))\r\n                );\r\n        }\r\n    }, [roomId]);\r\n\r\n    /*\r\n    useEffect(() => {\r\n        setSeed(Math.floor(Math.random()*5000));\r\n    },[]);\r\n    */\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"You typed >>>\", input);\r\n\r\n        db.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\r\n            message: input,\r\n            name: user.displayName,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        })\r\n        setInput(\"\");\r\n    };\r\n    return (\r\n        <div className=\"chat\">\r\n\r\n            <div className=\"chat__header\">\r\n            <Avatar src={`https://avatars.dicebear.com/api/human/${roomId}.svg`}/>\r\n                <div className=\"chat__headerInfo\">\r\n                    <h3>{roomName}</h3>\r\n                    <p>Last seen{\"\"}\r\n                        {new Date(\r\n                            messages[messages.length - 1]?.timestamp?.toDate()\r\n                        ).toUTCString()}\r\n                    </p>\r\n                </div>\r\n                <div className=\"chat__headerRight\">\r\n                <IconButton><SearchOutlined/></IconButton>\r\n                <IconButton><AttachFile/></IconButton>\r\n                <IconButton><MoreVert/></IconButton>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"chat__body\">\r\n                {messages.map((message) =>(\r\n                    <p className={`chat__message \r\n                        ${message.name === user.displayName && \"chat__reciever\"}\r\n                    `}>\r\n                    <span className=\"chat__name\">{message.name}</span>\r\n                    {message.message}\r\n                    <span className=\"chat__timestamp\">\r\n                        {new Date(message.timestamp?.toDate()).toUTCString()}\r\n                    </span>\r\n                </p>\r\n                ))}\r\n\r\n\r\n\r\n\r\n                \r\n            </div>\r\n\r\n            <div className=\"chat__footer\">\r\n                <InsertEmoticonIcon/>\r\n                <form>\r\n                    <input value={input} onChange={e => setInput(e.target.value)} placeholder=\"Type your message\" type=\"text\"/>\r\n                    <button onClick={sendMessage} type=\"submit\">Send a message</button>\r\n                </form>\r\n                <MicIcon/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","export const initialState = {\r\n    user:null,\r\n};\r\n\r\nexport const actionTypes = {\r\n    SET_USER:\"SET_USER\",\r\n};\r\nconst reducer = (state , action) => {\r\n    console.log(action);\r\n    switch (action.type) {\r\n        case actionTypes.SET_USER:\r\n            return{\r\n                ...state,\r\n                user: action.user,\r\n            };\r\n            \r\n    \r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\r\nimport \"./Login.css\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { auth, provider } from \"./firebase\";\r\nimport { useStateValue } from './StateProvider';\r\nimport { actionTypes } from './reducer';\r\nfunction Login() {\r\n    const [{}, dispatch] = useStateValue();\r\n\r\n    const signIn = () =>{\r\n        auth\r\n        .signInWithPopup(provider)\r\n        .then((result) => {\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: result.user,\r\n            });\r\n        })\r\n        .catch((error) => alert(error.message));\r\n    };\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__container\">\r\n            <img src=\"https://upload.wikimedia.org/wikipedia/commons/6/6b/WhatsApp.svg\" alt=\"\"/>\r\n                <div className=\"login__text\">\r\n                    <h1>Sign in to WhatsApp</h1>\r\n                </div>\r\n                <Button onClick={signIn}>\r\n                    Sign in With Google\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login\r\n","import React, { useState } from 'react';\n\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport Chat from './Chat';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from './Login';\nimport { useStateValue } from './StateProvider';\n\nfunction App() {\n  const [{ user }, dispatch] = useStateValue();\n  return (\n    <div className=\"app\">\n      {!user ? (\n        <Login />\n      ) : (\n          <div className=\"app__body\">\n\n            <Router>\n              <Sidebar />\n              <Switch>\n                <Route path=\"/rooms/:roomId\">\n                  <Chat />\n                </Route>\n                <Route path=\"/\">\n                  <Chat />\n                </Route>\n              </Switch>\n            </Router>\n          </div>\n        )}\n\n    </div>\n  );\n}\n\nexport default App;\n//hosting at https://clone-c52a5.web.app\n//firebase deploy --only hosting\n//firebase init        \n//firebase init  && npm run build && firebase deploy --only hosting  **** to deploy\n//npm install -g serve\n//serve -s build\n//firebase init hosting\n//firebase deploy --only hosting\n//firebase deploy --only functions","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer, { initialState } from \"./reducer\";\nimport { StateProvider} from \"./StateProvider\";\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState = {initialState}\n      reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}