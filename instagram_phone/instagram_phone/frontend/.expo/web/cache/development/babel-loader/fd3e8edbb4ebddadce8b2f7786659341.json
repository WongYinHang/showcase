{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from 'firebase';\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE } from \"../constants\";\nexport function fetchUser() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log('does not exist');\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}\nexport function fetchUserFollowing() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"following\").doc(firebase.auth().currentUser.uid).collection(\"userFollowing\").onSnapshot(function (snapshot) {\n      var following = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      dispatch({\n        type: USER_FOLLOWING_STATE_CHANGE,\n        following: following\n      });\n\n      for (var i = 0; i < following.length; i++) {\n        dispatch(fetchUsersData(following[i]));\n      }\n    });\n  };\n}\nexport function fetchUsersData(uid) {\n  return function (dispatch, getState) {\n    var found = getState().usersState.users.some(function (el) {\n      return el.uid === uid;\n    });\n\n    if (!found) {\n      firebase.firestore().collection(\"users\").doc(uid).get().then(function (snapshot) {\n        if (snapshot.exists) {\n          var user = snapshot.data();\n          user.uid = snapshot.id;\n          dispatch({\n            type: USERS_DATA_STATE_CHANGE,\n            user: user\n          });\n          dispatch(fetchUsersFollowingPosts(user.uid));\n        } else {\n          console.log('does not exist');\n        }\n      });\n    }\n  };\n}\nexport function fetchUsersFollowingPosts(uid) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var uid = snapshot.query.EP.path.segments[1];\n      console.log({\n        snapshot: snapshot\n      }, uid);\n      var user = getState().usersState.users.find(function (el) {\n        return el.uid === uid;\n      });\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread(_objectSpread({\n          id: id\n        }, data), {}, {\n          user: user\n        });\n      });\n      console.log(posts);\n      dispatch({\n        type: USERS_POSTS_STATE_CHANGE,\n        posts: posts,\n        uid: uid\n      });\n      console.log(getState());\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/nodejs/instagram_phone/instagram_phone/redux/actions/index.js"],"names":["firebase","USER_STATE_CHANGE","USER_POSTS_STATE_CHANGE","USER_FOLLOWING_STATE_CHANGE","USERS_DATA_STATE_CHANGE","fetchUser","dispatch","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","exists","type","data","console","log","fetchUserPosts","orderBy","posts","docs","map","id","fetchUserFollowing","onSnapshot","following","i","length","fetchUsersData","getState","found","usersState","users","some","el","user","fetchUsersFollowingPosts","query","EP","path","segments","find","USERS_POSTS_STATE_CHANGE"],"mappings":"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","sourcesContent":["import firebase from 'firebase'\r\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE } from '../constants'\r\n\r\nexport function fetchUser() {\r\n    return ((dispatch) => {\r\n        firebase.firestore()\r\n            .collection(\"users\")\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .get()\r\n            .then((snapshot) => {\r\n\r\n                if (snapshot.exists) {\r\n                    dispatch({ type: USER_STATE_CHANGE, currentUser: snapshot.data() })\r\n                }\r\n                else {\r\n                    console.log('does not exist')\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchUserPosts() {\r\n    return ((dispatch) => {\r\n        firebase.firestore()\r\n            .collection(\"posts\")\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .collection(\"userPosts\")\r\n            .orderBy(\"creation\", \"asc\")\r\n            .get()\r\n            .then((snapshot) => {\r\n                let posts = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data }\r\n                })\r\n\r\n                dispatch({ type: USER_POSTS_STATE_CHANGE, posts })\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchUserFollowing() {\r\n    return ((dispatch) => {\r\n        firebase.firestore()\r\n            .collection(\"following\")\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .collection(\"userFollowing\")\r\n            .onSnapshot((snapshot) => {\r\n                let following = snapshot.docs.map(doc => {\r\n                    const id = doc.id;\r\n                    return id\r\n                })\r\n\r\n                dispatch({ type: USER_FOLLOWING_STATE_CHANGE, following })\r\n                for (let i = 0; i < following.length; i++) {\r\n                    dispatch(fetchUsersData(following[i]))\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchUsersData(uid) {\r\n    return ((dispatch, getState) => {\r\n        const found = getState().usersState.users.some(el => el.uid === uid)\r\n        if (!found) {\r\n            firebase.firestore()\r\n                .collection(\"users\")\r\n                .doc(uid)\r\n                .get()\r\n                .then((snapshot) => {\r\n\r\n                    if (snapshot.exists) {\r\n                        let user = snapshot.data();\r\n                        user.uid = snapshot.id;\r\n                        dispatch({ type: USERS_DATA_STATE_CHANGE, user })\r\n                        dispatch(fetchUsersFollowingPosts(user.uid))\r\n                    }\r\n                    else {\r\n                        console.log('does not exist')\r\n                    }\r\n                })\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport function fetchUsersFollowingPosts(uid) {\r\n    return ((dispatch, getState) => {\r\n        firebase.firestore()\r\n            .collection(\"posts\")\r\n            .doc(uid)\r\n            .collection(\"userPosts\")\r\n            .orderBy(\"creation\", \"asc\")\r\n            .get()\r\n            .then((snapshot) => {\r\n                const uid = snapshot.query.EP.path.segments[1];\r\n                console.log({ snapshot }, uid);\r\n                const user = getState().usersState.users.find(el => el.uid === uid)\r\n                let posts = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data, user }\r\n                })\r\n                console.log(posts);\r\n                dispatch({ type: USERS_POSTS_STATE_CHANGE, posts, uid })\r\n                console.log(getState());\r\n            })\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}